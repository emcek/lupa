[build-system]
build-backend = 'setuptools.build_meta'
requires = ["Cython>=3.0.9", "setuptools<72.0.0", "wheel"]

[project]
name = 'pylupa-test'
authors = [{name = 'Stefan Behnel', email = 'stefan_ml@behnel.de'}]
maintainers = [{name = 'Michal Plichta'}]
description = "Python wrapper around Lua and LuaJIT"
license = {text = 'MIT License'}
requires-python = '>=3.6'
readme = 'README.rst'
version = '2.2.2'
classifiers = [
        'Development Status :: 5 - Production/Stable',
        'Intended Audience :: Developers',
        'Intended Audience :: Information Technology',
        'License :: OSI Approved :: MIT License',
        'Programming Language :: Cython',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'Programming Language :: Python :: 3.9',
        'Programming Language :: Python :: 3.10',
        'Programming Language :: Python :: 3.11',
        'Programming Language :: Python :: 3.12',
        'Programming Language :: Python :: 3.13',
        'Programming Language :: Lua',
        'Programming Language :: Other Scripting Engines',
        'Operating System :: OS Independent',
        'Topic :: Software Development',
]

[project.urls]
Homepage = 'https://github.com/scoder/lupa'
Documentation = 'https://github.com/scoder/lupa/README.rst'
Source = 'https://github.com/scoder/lupa.git'
Changelog = 'https://github.com/scoder/lupa/CHANGES.rst'

[tool.cibuildwheel]
build-verbosity = 2
environment = {LUPA_USE_BUNDLE = "true"}
skip = ["pp*-manylinux_aarch64", "pp*-manylinux_i686", "cp38-macosx_universal2", "cp36-macosx_x86_64"]
test-skip = ["*-macosx_arm64", "*-macosx_universal2:arm64", "*-macosx_x86_64"]
test-command = "python -c \"import lupa\" && python -c \"import lupa.lua54\" "

[tool.cibuildwheel.linux]
archs = ["x86_64", "aarch64", "i686"]
repair-wheel-command = "auditwheel repair --strip -w {dest_dir} {wheel}"

[tool.cibuildwheel.linux.environment]
CFLAGS = "-O3 -g0 -mtune=generic -pipe -fPIC -flto"
LDFLAGS = "-fPIC -flto"
LD = "gcc-ld"
AR = "gcc-ar"
NM = "gcc-nm"
RANLIB = "gcc-ranlib"

[[tool.cibuildwheel.overrides]]
select = "*aarch64"
environment = {CFLAGS = "-O3 -g1 -pipe -fPIC -flto -march=armv8-a -mtune=cortex-a72", AR = "gcc-ar", NM = "gcc-nm", RANLIB = "gcc-ranlib", LDFLAGS = "-fPIC -flto", LUPA_USE_BUNDLE = "true" }

[tool.cibuildwheel.windows]
archs = ["AMD64", "x86"]
test-command = "python -c \"import lupa\" && python -c \"import lupa.lua54\" && python -c \"import lupa.luajit21\" "

[tool.cibuildwheel.macos]
# https://cibuildwheel.readthedocs.io/en/stable/faq/#what-to-provide suggests to provide
# x86_64 and one of universal2 or arm64 wheels.  x86_64 is still required by older pips,
# so additional arm64 wheels would suffice.  However, since the library build uses a mixed
# amd64/arm64 setup, we build universal2 wheels regardless.
archs = ["x86_64", "arm64", "universal2"]
